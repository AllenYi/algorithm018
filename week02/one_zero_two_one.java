package com.arithmeticHomeWork;
//1021. 删除最外层的括号  有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。
//如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。
//给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。
//对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。
//示例 1：
//        输入："(()())(())"
//        输出："()()()"
//        解释：
//        输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
//        删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"

//        示例 2：
//        输入："(()())(())(()(()))"
//        输出："()()()()(())"
//        解释：
//        输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
//        删除每个部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"

//        示例 3：
//        输入："()()"
//        输出：""
//        解释：
//        输入字符串为 "()()"，原语化分解得到 "()" + "()"，
//        删除每个部分中的最外层括号后得到 "" + "" = ""。

public class one_zero_two_one {

      public String  main(String s){
          String ss="(()())(())";
           StringBuilder sb= new StringBuilder();
           int level =0;
          //一个有效字符串的'('和')'字符个数相等
          for (char c: s.toCharArray()){ //s.toCharArraty方法把字符串转换为数组 遍历数组
               if (c ==')') --level;//这里之后循环进来肯定经历过有效字符串c=='('的判断所以--level  level的值为0或者1
               if (level>=1) sb.append(c);//这里第一步因为要去掉最外围的（所以判断level必需过滤掉所以leave>=1
               if (c=='(') ++level;  //第一个有效字符串"(" level为2 因为过滤掉第一个'（'的时候++了所以这里为2
           }
           return sb.toString();
      }



}
































